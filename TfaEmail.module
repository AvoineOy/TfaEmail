<?php namespace ProcessWire;

/**
 * TfaEmail - ProcessWire two factor authentication email based implementation
 *
 * @property string $emailFrom
 * @property string $wireMailer
 * @property int $codeLength
 * @property int $codeExpire
 * @property string $emailField Email field name when custom option not used
 * 
 * @method bool emailCode($email, $code)
 * @method void populateEmailMessage(WireMail $mail, $email, $code)
 * @method string generateRandomCode($length = 6)
 * 
 */
class TfaEmail extends Tfa implements Module, ConfigurableModule {
	
	const defaultEmailFrom = 'noreply@processwire.com';

	/**
	 * Construct
	 * 
	 */
	public function __construct() {
		parent::__construct();
		$this->set('codeLength', 6); 
		$this->set('codeExpire', 180);
		$this->set('emailFrom', self::defaultEmailFrom); 
		$this->set('wireMailer', '');
		$this->set('emailField', 'email'); // email field name when when custom option not used
	}
	
	/**
	 * Get translated Tfa type short name
	 *
	 * @return string
	 *
	 */
	public function getTfaTypeName() {
		return $this->_('Email'); 
	}

	/**
	 * Get translated Tfa type title
	 *
	 * @return string
	 *
	 */
	public function getTfaTypeTitle() {
		return $this->_('Email two-factor authentication');
	}

	/**
	 * Get translated Tfa type summary
	 *
	 * @return string
	 *
	 */
	public function getTfaTypeSummary() {
		return $this->_('Sends you a random code by email that you enter at login.');
	}

	/**
	 * Is TFA enabled for given user?
	 *
	 * @param User $user
	 * @param array $settings
	 * @return bool
	 *
	 */
	public function enabledForUser(User $user, array $settings) {
		if(empty($settings['conf_email'])) return false;
		$enabled = !empty($settings['conf_email']) && $settings['conf_email'] === $settings['code_email'];
		return $enabled;
	}

	/**
	 * Does this TFA module support automatic enable?
	 *
	 * @param User $user Specify user to also confirm it is supported for given user.
	 *   Omit to test if the module supports it in general.
	 * @return bool
	 *
	 */
	public function autoEnableSupported(User $user = null) {
		if($user && !$user->get($this->emailField)) return false; // no email to use
		return true;
	}

	/**
	 * Programmatically enable this TFA module for given user, using their current email field
	 *
	 * @param User $user
	 * @param array $settings For internal use, should only be specified on a parent::setEnabledForUser() call.
	 * @throws WireException
	 *
	 */
	public function autoEnableUser(User $user, array $settings = array()) {
		if(!strlen($user->get($this->emailField))) {
			throw new WireException("User email address required to auto-enable");
		}
		$settings = $this->getUserSettings($user);
		// note that 'e' means “user’s current email address in email field”
		$settings['conf_email'] = 'e';
		$settings['code_email'] = 'e';
		parent::autoEnableUser($user, $settings);
	}
	
	/**
	 * Start two-factor authentication for User
	 *
	 * @param User $user
	 * @param array $settings
	 * @return bool True on success, false on fail
	 *
	 */
	public function startUser(User $user, array $settings) {
	
		// generate code
		$code = $this->getNewCode();
	
		// email the code to the user
		$email = $settings['code_email'];
		if($email === 'e') $email = $user->get($this->emailField);
		if(empty($email)) return false;
		if(!$this->emailCode($email, $code)) return false;
		
		return parent::startUser($user, $settings);
	}

	/**
	 * Send the authentication code to an email address
	 * 
	 * @param string $email
	 * @param string $code
	 * @return bool
	 * 
	 */
	public function ___emailCode($email, $code) {
		
		$mail = $this->getMailer();		
		
		$this->populateEmailMessage($mail, $email, $code); 
		
		if($mail->send()) {
			$this->warning(sprintf(
				$this->_('A code has been sent to you by email at %s - please find it and enter it on this screen.'), 
				$this->disguiseEmail($email)
			));
			return true;
		} else {
			$this->error($this->_('Unable to send email due to possible email configuration error.'));
			return false;
		}
	}

	/**
	 * Populate WireMail with to, from, subject and body
	 * 
	 * @param WireMail $message
	 * @param string $email
	 * @param string $code
	 * 
	 */
	public function ___populateEmailMessage(WireMail $message, $email, $code) {
		
		$httpHost = $this->wire('config')->httpHost;
		$subject = $this->_('Authentication Code') . ' - ' . $httpHost;
		$from = $this->emailFrom;
		$body = sprintf($this->_('Your two-factor authentication code is: %s'), $code);

		if(strpos($body, 'Your two-factor') === 0) {
			// if the above one is not already translated, use this one instead:
			$body = sprintf($this->_('%s is your two-factor authentication code'), $code);
		}

		if(empty($from)) $from = self::defaultEmailFrom;
		list($name, $host) = explode('@', $from);
		if(strtolower($host) == 'processwire.com' && ($name != 'newsletter' && $name != 'ryan')) {
			$from = "$name@$httpHost"; // substitute actual http host
		}
		
		$message->to($email)->from($from)->subject($subject)->body($body);
	}

	/**
	 * Get WireMail instance
	 * 
	 * @return WireMail
	 * 
	 */
	public function getMailer() {
		$mailer = null;
		$mail = $this->wire()->mail;	
		if($this->wireMailer && $mail) $mailer = $mail->new(array('module' => $this->wireMailer));
		if(!$mailer && $mail) $mailer = $mail->new();
		if(!$mailer) $mailer = wireMail();
		return $mailer;
	}

	/**
	 * Get a new random auth code and remember in session
	 * 
	 * @return string
	 * @throws WireException
	 * 
	 */
	protected function getNewCode() {
		
		$length = $this->codeLength > 0 ? $this->codeLength : 6;
		$code = $this->generateRandomCode($length);
		if(strlen($code) !== $length) throw new WireException('Error generating code');
		
		// remember code in session
		$codes = $this->sessionGet('codes', array());
		if(count($codes) > 2) $codes = array_slice($codes, -2); // max 3 codes at once
		$codes[] = array(
			'code' => $code,
			'expires' => time() + $this->codeExpire,
		);
		$this->sessionSet('codes', $codes);
		
		return $code;
	}

	/**
	 * Generate a random auth code
	 * 
	 * @param int $length
	 * @return string
	 * 
	 */
	protected function ___generateRandomCode($length = 6) {
		$rand = new WireRandom();
		$this->wire($rand);
		return $rand->numeric($length);
	}

	/**
	 * Disguise an email address so that only the owner would recognize it
	 * 
	 * @param string $email
	 * @return string
	 * 
	 */
	protected function disguiseEmail($email) {
		list($a, $b) = explode('@', $email);
		if(strlen($a) > 1) {
			$as = str_repeat('*', strlen($a) - 1);
			$a = substr($a, 0, 1) . $as;
		} else {
			$a = '*';
		}
		if(strpos($b, '.')) {
			$bb = explode('.', $b);
			$c = '.' . array_pop($bb);
			$b = implode('.', $bb);
		} else {
			$c = '';
		}
		if(strlen($b) > 1) {
			$bs = str_repeat('*', strlen($b) - 1);
			$b = $bs . substr($b, -1);
		} else {
			$b = '*';
		}
		return "$a@$b$c";
	}
		
	
	/**
	 * Return true if code is valid or false if not
	 *
	 * @param User $user
	 * @param string|int $code
	 * @param array $settings
	 * @return bool|int
	 *
	 */
	public function isValidUserCode(User $user, $code, array $settings) {

		if($user || $settings) {} // ignore
		if(strlen($code) !== $this->codeLength) return false;

		$codes = $this->sessionGet('codes', array());
		$valid = false;

		foreach($codes as $key => $info) {
			if($info['code'] !== $code) continue;
			if(time() >= $info['expires']) {
				// code is expired
				$valid = 0;
			} else {
				// code is valid
				$valid = true;
			}
			break;
		}

		return $valid;
	}
	
	/**
	 * Get fields needed for a user to configure and confirm TFA from their user profile
	 *
	 * @param User $user
	 * @param InputfieldWrapper $fieldset
	 * @param array $settings
	 *
	 */
	public function ___getUserSettingsInputfields(User $user, InputfieldWrapper $fieldset, $settings) {
		parent::___getUserSettingsInputfields($user, $fieldset, $settings);
		
		// check if the value of the field has changed
		if(empty($settings['code_email'])) {
			// not yet entered, nothing to do yet
			$userEmail = $user->get($this->emailField);
			if($userEmail) {
				/** @var InputfieldRadios $f */
				$f = $this->wire()->modules->get('InputfieldRadios');
				$f->attr('name', 'email_type');
				$f->label = $this->_('What email do you want to use?');
				$f->addOption('current', sprintf($this->_('Current email address (%s)'), $userEmail));
				$f->addOption('custom', $this->_('Specify a different email'));
				$f->val('current');
				$f->icon('envelope');
				$fieldset->add($f);
			}
		
			/** @var InputfieldEmail $f */
			$f = $this->wire()->modules->get('InputfieldEmail');
			$f->attr('name', 'code_email');
			$f->icon = 'envelope';
			if($userEmail) {
				$f->label = $this->_('To use a different email please specify it here');
				$f->showIf = '_tfa_email_type=custom';
			} else {
				$f->label = $this->_('Email address to send code to');
			}
			$fieldset->add($f);
			$fieldset->description = $this->_('Review and complete the field(s) below, then click “submit” and a confirmation code will be emailed to you.'); 
			
		} else {
			// add a confirmation code field
			$fieldset->new('text', 'conf_code', $this->_('Confirm authentication code'))
				->icon('lock')
				->attr('autofocus', 'autofocus')
				->notes($this->_('To re-send code, leave blank and save.')); 
		}
	}

	/**
	 * Get Inputfields when user has this Tfa module enabled
	 * 
	 * @param User $user
	 * @param InputfieldWrapper $fieldset
	 * @param array $settings
	 * 
	 */
	public function ___getUserEnabledInputfields(User $user, InputfieldWrapper $fieldset, $settings) {
		parent::___getUserEnabledInputfields($user, $fieldset, $settings);
		$userEmail = $user->get($this->emailField);
		$email = $settings['conf_email'] === 'e' ? $userEmail : $settings['conf_email'];
		$fieldset->notes = trim(
			$fieldset->notes . "\n" .
			sprintf($this->_('Your 2-factor email is: %s'), $email)
		);
	}

	/**
	 * Called when the user config fieldset has been processed but before settings have been saved
	 *
	 * @param User $user
	 * @param InputfieldWrapper $fieldset
	 * @param array $settings Associative array of new/current settings after processing
	 * @param array $settingsPrev Associative array of previous settings
	 * @return array Return $newSettings array (modified as needed)
	 *
	 */
	public function ___processUserSettingsInputfields(User $user, InputfieldWrapper $fieldset, $settings, $settingsPrev) {
		
		if($fieldset && $settingsPrev) {} // ignore
		
		$settings = parent::___processUserSettingsInputfields($user, $fieldset, $settings, $settingsPrev); 
		$emailType = isset($settings['email_type']) ? $settings['email_type'] : 'custom';
		$userEmail = $user->get($this->emailField);
		
		if($emailType === 'current' && $userEmail) {
			// use current email from field (indicated by value 'e')
			$settings['code_email'] = 'e';
		} else {
			// use custom email address
		}
		
		if(!empty($settings['conf_code'])) { 
			$valid = $this->isValidUserCode($user, $settings['conf_code'], $settings);
			if($valid) {
				$settings['conf_email'] = $settings['code_email'];
				$this->message($this->_('Thank you, your email address has been confirmed'), Notice::noGroup);
			} else if($valid === 0) {
				$this->error($this->_('You entered an expired code.'), Notice::noGroup);
			} else {
				$this->error($this->_('Invalid confirmation code, please try again'), Notice::noGroup); 
			}
			$settings['conf_code'] = '';
		} else if($settings['code_email'] && $settings['conf_email'] != $settings['code_email']) {
			$code = $this->getNewCode();
			$email = $settings['code_email'] === 'e' ? $userEmail : $settings['code_email'];
			$this->emailCode($email, $code);
		}
		
		return $settings;
	}
	
	public function ___processUserEnabledInputfields(User $user, InputfieldWrapper $fieldset, $settings, $settingsPrev) {
		$settings = parent::___processUserEnabledInputfields($user, $fieldset, $settings, $settingsPrev);
		return $settings;
	}
	
	/**
	 * Get default/blank user settings
	 *
	 * @param User $user
	 * @return array
	 *
	 */
	protected function getDefaultUserSettings(User $user) {
		if($user) {}
		return array(
			'code_email' => '',
			'conf_email' => '',	
			'conf_code' => '', 
		);
	}

	/**
	 * Save TFA data for given user to user_tfa field
	 *
	 * @param User $user
	 * @param array $settings
	 * @return bool
	 * @throws WireException
	 *
	 */
	public function saveUserSettings(User $user, array $settings) {
		unset($settings['email_type']); // we don't need this to be saved
		unset($settings['conf_code']); 
		return parent::saveUserSettings($user, $settings);
	}

	/**
	 * Module configuration
	 *
	 * @param InputfieldWrapper $inputfields
	 *
	 */
	public function getModuleConfigInputfields(InputfieldWrapper $inputfields) {

		$inputfields->new('integer', 'codeLength', $this->_('Authentication code length'))
			->val($this->codeLength)
			->columnWidth(50);
		$inputfields->new('integer', 'codeExpire', $this->_('Code expiration (seconds)'))
			->val($this->codeExpire)
			->columnWidth(50);
		$inputfields->new('email', 'emailFrom', $this->_('From address for emailed codes'))
			->val($this->emailFrom)
			->notes($this->_('Placeholder “processwire.com” is automatically replaced with actual HTTP host at runtime.'));
		
		$mailer = $this->wire('mail')->new();
		$mailerName = $mailer ? $mailer->className() : 'WireMail';
		
		/** @var InputfieldRadios $f */
		$f = $this->modules->get('InputfieldRadios');
		$f->attr('name', 'wireMailer');
		$f->label = $this->_('Email send method');
		$f->addOption('',
			$this->_('Auto-select:') . ' ' .
			'[span.detail]' . sprintf($this->_('Currently %s'), $mailerName) . '[/span]'
		);
		$f->addOption('WireMail',
			$this->_('PHP mail():') . ' ' .
			'[span.detail]'  . $this->_('base WireMail') . '[/span]'
		);
		foreach($this->modules->findByPrefix('WireMail') as $wireMailerName) {
			$info = $this->modules->getModuleInfoVerbose($wireMailerName);
			$label = str_replace('WireMail', '', $wireMailerName);
			$f->addOption($wireMailerName, "$label: [span.detail] $info[summary] [/span]");
		}
		$f->notes = sprintf($this->_('For more options install [WireMail modules](%s).'), 'https://modules.processwire.com/search/?q=WireMail');
		$f->attr('value', $this->wireMailer);
		$inputfields->add($f);

	}
}